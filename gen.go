package ctxdata

import (
	"time"
)

// Code generated by generate-helpers.fish; DO NOT EDIT.

// GetString returns the value of key as type string.
// If key is not set, or its value is not of type string,
// then GetString returns a zero value of type string.
func (d *Data) GetString(key string) (val string) {
	return d.GetStringDefault(key, val)
}

// GetStringDefault returns the value of key as type string.
// If key is not set, or its value is not of type string,
// then GetStringDefault returns defaultValue.
func (d *Data) GetStringDefault(key string, defaultValue string) string {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(string)
	if !ok {
		return defaultValue
	}

	return res
}

// GetInt returns the value of key as type int.
// If key is not set, or its value is not of type int,
// then GetInt returns a zero value of type int.
func (d *Data) GetInt(key string) (val int) {
	return d.GetIntDefault(key, val)
}

// GetIntDefault returns the value of key as type int.
// If key is not set, or its value is not of type int,
// then GetIntDefault returns defaultValue.
func (d *Data) GetIntDefault(key string, defaultValue int) int {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(int)
	if !ok {
		return defaultValue
	}

	return res
}

// GetInt64 returns the value of key as type int64.
// If key is not set, or its value is not of type int64,
// then GetInt64 returns a zero value of type int64.
func (d *Data) GetInt64(key string) (val int64) {
	return d.GetInt64Default(key, val)
}

// GetInt64Default returns the value of key as type int64.
// If key is not set, or its value is not of type int64,
// then GetInt64Default returns defaultValue.
func (d *Data) GetInt64Default(key string, defaultValue int64) int64 {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(int64)
	if !ok {
		return defaultValue
	}

	return res
}

// GetUint64 returns the value of key as type uint64.
// If key is not set, or its value is not of type uint64,
// then GetUint64 returns a zero value of type uint64.
func (d *Data) GetUint64(key string) (val uint64) {
	return d.GetUint64Default(key, val)
}

// GetUint64Default returns the value of key as type uint64.
// If key is not set, or its value is not of type uint64,
// then GetUint64Default returns defaultValue.
func (d *Data) GetUint64Default(key string, defaultValue uint64) uint64 {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(uint64)
	if !ok {
		return defaultValue
	}

	return res
}

// GetFloat64 returns the value of key as type float64.
// If key is not set, or its value is not of type float64,
// then GetFloat64 returns a zero value of type float64.
func (d *Data) GetFloat64(key string) (val float64) {
	return d.GetFloat64Default(key, val)
}

// GetFloat64Default returns the value of key as type float64.
// If key is not set, or its value is not of type float64,
// then GetFloat64Default returns defaultValue.
func (d *Data) GetFloat64Default(key string, defaultValue float64) float64 {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(float64)
	if !ok {
		return defaultValue
	}

	return res
}

// GetBool returns the value of key as type bool.
// If key is not set, or its value is not of type bool,
// then GetBool returns a zero value of type bool.
func (d *Data) GetBool(key string) (val bool) {
	return d.GetBoolDefault(key, val)
}

// GetBoolDefault returns the value of key as type bool.
// If key is not set, or its value is not of type bool,
// then GetBoolDefault returns defaultValue.
func (d *Data) GetBoolDefault(key string, defaultValue bool) bool {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(bool)
	if !ok {
		return defaultValue
	}

	return res
}

// GetDuration returns the value of key as type time.Duration.
// If key is not set, or its value is not of type time.Duration,
// then GetDuration returns a zero value of type time.Duration.
func (d *Data) GetDuration(key string) (val time.Duration) {
	return d.GetDurationDefault(key, val)
}

// GetDurationDefault returns the value of key as type time.Duration.
// If key is not set, or its value is not of type time.Duration,
// then GetDurationDefault returns defaultValue.
func (d *Data) GetDurationDefault(key string, defaultValue time.Duration) time.Duration {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(time.Duration)
	if !ok {
		return defaultValue
	}

	return res
}

// GetTime returns the value of key as type time.Time.
// If key is not set, or its value is not of type time.Time,
// then GetTime returns a zero value of type time.Time.
func (d *Data) GetTime(key string) (val time.Time) {
	return d.GetTimeDefault(key, val)
}

// GetTimeDefault returns the value of key as type time.Time.
// If key is not set, or its value is not of type time.Time,
// then GetTimeDefault returns defaultValue.
func (d *Data) GetTimeDefault(key string, defaultValue time.Time) time.Time {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(time.Time)
	if !ok {
		return defaultValue
	}

	return res
}

// GetError returns the value of key as type error.
// If key is not set, or its value is not of type error,
// then GetError returns a zero value of type error.
func (d *Data) GetError(key string) (val error) {
	return d.GetErrorDefault(key, val)
}

// GetErrorDefault returns the value of key as type error.
// If key is not set, or its value is not of type error,
// then GetErrorDefault returns defaultValue.
func (d *Data) GetErrorDefault(key string, defaultValue error) error {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(error)
	if !ok {
		return defaultValue
	}

	return res
}
